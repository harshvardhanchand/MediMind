"""update_document_types

Revision ID: 7f426826590e
Revises: f1d2e3a4b5c6
Create Date: 2025-06-07 19:56:07.410098

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7f426826590e'
down_revision: Union[str, None] = 'f1d2e3a4b5c6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_ai_analysis_related_document', table_name='ai_analysis_logs')
    op.drop_index('idx_ai_analysis_related_medication', table_name='ai_analysis_logs')
    op.drop_index('idx_ai_analysis_user_trigger', table_name='ai_analysis_logs')
    op.drop_column('ai_analysis_logs', 'embedding')
    op.alter_column('documents', 'file_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('documents', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('documents', 'user_added_tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('documents', 'metadata_overrides',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index('ix_documents_document_type', table_name='documents')
    op.drop_index('ix_documents_processing_status', table_name='documents')
    op.drop_constraint('documents_user_id_fkey', 'documents', type_='foreignkey')
    op.create_foreign_key(None, 'documents', 'users', ['user_id'], ['user_id'])
    op.drop_column('documents', 'updated_at')
    op.drop_column('documents', 'created_at')
    op.alter_column('extracted_data', 'content',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False)
    op.drop_constraint('extracted_data_document_id_key', 'extracted_data', type_='unique')
    op.drop_index('ix_extracted_data_review_status', table_name='extracted_data')
    op.create_index(op.f('ix_extracted_data_document_id'), 'extracted_data', ['document_id'], unique=True)
    op.drop_constraint('extracted_data_reviewed_by_user_id_fkey', 'extracted_data', type_='foreignkey')
    op.drop_constraint('extracted_data_document_id_fkey', 'extracted_data', type_='foreignkey')
    op.create_foreign_key(None, 'extracted_data', 'users', ['reviewed_by_user_id'], ['user_id'])
    op.create_foreign_key(None, 'extracted_data', 'documents', ['document_id'], ['document_id'])
    op.drop_column('extracted_data', 'updated_at')
    op.drop_column('extracted_data', 'created_at')
    op.drop_index('idx_medical_situations_confidence', table_name='medical_situations')
    op.drop_index('medical_situations_embedding_idx', table_name='medical_situations', postgresql_using='hnsw')
    op.drop_column('medical_situations', 'embedding')
    op.alter_column('medications', 'time_of_day',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('medications', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_constraint('medications_related_document_id_fkey', 'medications', type_='foreignkey')
    op.drop_constraint('medications_user_id_fkey', 'medications', type_='foreignkey')
    op.create_foreign_key(None, 'medications', 'users', ['user_id'], ['user_id'])
    op.create_foreign_key(None, 'medications', 'documents', ['related_document_id'], ['document_id'])
    op.drop_index('idx_notifications_related_document', table_name='notifications')
    op.drop_index('idx_notifications_related_health_reading', table_name='notifications')
    op.drop_index('idx_notifications_related_medication', table_name='notifications')
    op.drop_index('idx_notifications_unread', table_name='notifications')
    op.drop_index('idx_notifications_user_created', table_name='notifications')
    op.alter_column('users', 'supabase_id',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'user_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('users', 'app_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_constraint('users_email_key', 'users', type_='unique')
    op.drop_constraint('users_supabase_id_key', 'users', type_='unique')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('users_supabase_id_key', 'users', ['supabase_id'])
    op.create_unique_constraint('users_email_key', 'users', ['email'])
    op.alter_column('users', 'app_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('users', 'user_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('users', 'supabase_id',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_index('idx_notifications_user_created', 'notifications', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_notifications_unread', 'notifications', ['user_id', 'is_read'], unique=False)
    op.create_index('idx_notifications_related_medication', 'notifications', ['related_medication_id'], unique=False)
    op.create_index('idx_notifications_related_health_reading', 'notifications', ['related_health_reading_id'], unique=False)
    op.create_index('idx_notifications_related_document', 'notifications', ['related_document_id'], unique=False)
    op.drop_constraint(None, 'medications', type_='foreignkey')
    op.drop_constraint(None, 'medications', type_='foreignkey')
    op.create_foreign_key('medications_user_id_fkey', 'medications', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
    op.create_foreign_key('medications_related_document_id_fkey', 'medications', 'documents', ['related_document_id'], ['document_id'], ondelete='SET NULL')
    op.alter_column('medications', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('medications', 'time_of_day',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('medical_situations', sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True))
    op.create_index('medical_situations_embedding_idx', 'medical_situations', ['embedding'], unique=False, postgresql_using='hnsw')
    op.create_index('idx_medical_situations_confidence', 'medical_situations', ['confidence_score'], unique=False)
    op.add_column('extracted_data', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('extracted_data', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'extracted_data', type_='foreignkey')
    op.drop_constraint(None, 'extracted_data', type_='foreignkey')
    op.create_foreign_key('extracted_data_document_id_fkey', 'extracted_data', 'documents', ['document_id'], ['document_id'], ondelete='CASCADE')
    op.create_foreign_key('extracted_data_reviewed_by_user_id_fkey', 'extracted_data', 'users', ['reviewed_by_user_id'], ['user_id'], ondelete='SET NULL')
    op.drop_index(op.f('ix_extracted_data_document_id'), table_name='extracted_data')
    op.create_index('ix_extracted_data_review_status', 'extracted_data', ['review_status'], unique=False)
    op.create_unique_constraint('extracted_data_document_id_key', 'extracted_data', ['document_id'])
    op.alter_column('extracted_data', 'content',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True)
    op.add_column('documents', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.add_column('documents', sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'documents', type_='foreignkey')
    op.create_foreign_key('documents_user_id_fkey', 'documents', 'users', ['user_id'], ['user_id'], ondelete='CASCADE')
    op.create_index('ix_documents_processing_status', 'documents', ['processing_status'], unique=False)
    op.create_index('ix_documents_document_type', 'documents', ['document_type'], unique=False)
    op.alter_column('documents', 'metadata_overrides',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('documents', 'user_added_tags',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('documents', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('documents', 'file_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.add_column('ai_analysis_logs', sa.Column('embedding', sa.NullType(), autoincrement=False, nullable=True))
    op.create_index('idx_ai_analysis_user_trigger', 'ai_analysis_logs', ['user_id', 'trigger_type'], unique=False)
    op.create_index('idx_ai_analysis_related_medication', 'ai_analysis_logs', ['related_medication_id'], unique=False)
    op.create_index('idx_ai_analysis_related_document', 'ai_analysis_logs', ['related_document_id'], unique=False)
    # ### end Alembic commands ###
